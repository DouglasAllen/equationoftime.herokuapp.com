%html
  %head
    %title time_julian_century
  %body
  - if @solar    
    %h1
      Time Julian Century (deprecated)
    %h3
      %pre
        :preserve
          Calculations are made with the Universal Time Coordinate or GMT of the current time.
          
          DateTime.now.to_time.utc.to_datetime =
    %h5 
      #{@current}     
    %h3
      %pre
        :preserve
        
          Note: This method is not used anymore. An @ta attribute is being set in the
                class intializer that is just the same formula for t1.
                @ta and @ma is also set with #ma_ta_set now for the gem at github.
                No dates or times are needed as parameteres except for display
                methods. See lib/eot/displays.rb in the gem or docs.
          The Ruby Equation_of_Time#time_julian_century( ) method is:                   
          
          def  time_julian_century( dt = DT2000 )
            
            # DT2000 is a default DateTime for the J2000 epoch.
            # The TT ( Terrestrial Time ) = January 1, 2000, 12:00 pm.
            
            # Julian Period Day Number J2000.0 is subtracted from the
            # Julian Number we get from dt.jd
            # The J2000.0 epoch is precisely Julian date 2451545.0
            # A check for nils and zeros is made which add defaults
            # if they are. A default array of [0.0, 0.0, 0.0, 0.0, 0.0]
            # would get returned.
            # a check for DateTime is made and is possible to pass in
            # a Julian Number also. If dt is not a Julian Number then
            # we make one out of the dt class.

            # dt  = check_t_zero( dt )      	  
            # dt.class == DateTime ? jd = dt.ajd : jd = dt   
            
            # An array of powers is returned to keep things dry or we
            # would do this for every angle calculation.
            t1 = ( jd - 2451545.0 ) / 36525.0
            # t2  = t1 * t1
            # t3  = t1 * t2
            # t4  = t1 * t3
            # t5  = t1 * t4
            # t6  = t1 * t5
            # t7  = t1 * t6
            # t8  = t1 * t7
            # t9  = t1 * t8
            # t10 = t1 * t9
            # [ t1, t2, t3, t4, t5, t6, t7, t8, t9, t10 ] 
               
          end          
          
          Note: The dt now displayed above is the parameter passed to this method. 
          
          The returned array values are =
    %h5
      #{@now}    
    %h3
      %pre
        :preserve 
            An array of values was returned from this method and was used for the parameter 
          ( ta ) passed into the angle calculation methods. This is just to show how it is
          used but there is a special method used to make things simple. I stole the idea
          from astro-algo gem and used only the first element of the array t1 ta[0]. 
          That method is an Enumerable#inject(0.0) {|p, a| p * ta[0] + a} for the 
          arrays of coefficients in some angles methods. And that was before we made C
          extensions and using Celes gem which is much faster now.
    %h3
      %a{:href => "/mean"} Mean Anomaly
