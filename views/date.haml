!!!
%html
  %head
    %title julian_time
    %body
    
    - if @solar
      %h1 Julian Numbers
      %h3
        %pre
          :preserve
              Astronomers sometimes use Julian Period Day Numbers for logging of their        
            astronomical observations. The time reference we need starts at midnight UTC
            for the day but "Julian Day Numbers" begin at noon or 12:00 considering a 24
            hour day. There is only a half day difference for what is termed 
            "The Astronomical Julian Day Number" and it is the Julian Day Number with 1/2
            or 0.5 day(12 hours fractional day) subtracted.
        
            ajd = jd - 0.5 
          
              Midnight is where we normally start counting hours for any day and it 
            just happens to be 12 hours from the International Date Line where we 
            start counting days globally. Time is referenced from the Greenwhich Prime 
            Meridian established in Greenwich, England in the late 1800s. We wind up 
            adding on the current time to this ajd as a fraction of the day to get a 
            correct Julian Period Day Number for the time period of interest.        
     
              The calculated terms used for this Ruby back-end site are done with 
            "Universal Time Coordinate" (UTC) of the current server time.
     
              In Ruby we can use the Date class and many of the methods or functions
            from this class. One method used here is Date.jd( ) which gives us a 
            Julian Day Number. We can set the jd attribute for Equation_of_Time class
            using an instance method of the class defined as say eot_instance.
            Hence eot_instance.jd=( ) is the method we can use to set it.
            This is just a convenience method for setting the jd attribute and allows
            us to keep it handy. We could just set the attribute directly. 
            Use the Date.jd() or DateTime.jd() to find it first.
            
              DateTime is a class included in the Date class. It can be used like the
            Time class to find the current time.  ( time = Time.now )            
       
            datetime = DateTime.now
        %input{:style => "font-weight: bold; width: 225px", :value => "  #{DateTime.now}"}        
      %h3
        %pre
          :preserve          
            Note: If you do this on your system it will be in local time.

            To ensure that we get time in UTC there are further methods available.            
            Let's convert it to a Time class with the to_time() method as shown.
            
            time = DateTime.now.to_time
        %input{:style => "font-weight: bold; width: 225px", :value => "  #{DateTime.now.to_time}"}        
      %h3
        %pre
          :preserve
            Note: it is still in local time or the time on the server.
            But doesn't it look nicer now with whitespace?
            Let's make sure we have a time in UTC with utc() method.
            
            time = DateTime.now.to_time.utc
        %input{:style => "font-weight: bold; width: 225px", :value => "  #{DateTime.now.to_time.utc}"}        
      %h3
        %pre
          :preserve                        
              Do you see any difference? If the server is set at UTC it will have 00:00
            on the end for just local time and UTC on the end for universal time.
            Let's forgo the input boxes for now. See the next output type.

            time =            
      %h5
        #{DateTime.now.to_time.utc}
      %h3
        %pre
          :preserve 
              This is a Time class in real server time.
            Let's just see if we can get a valid Julian Day Number with the time as a
            day fraction added on. We'll use the ajd() method from the DateTime class.
            But first we have to convert it back to a DateTime or Date class.            
            
            DateTime.now.to_time.utc.to_datetime.ajd =          
      %h5
        #{DateTime.now.to_time.utc.to_datetime.ajd}      
      %h3
        %pre
          :preserve
              It looks like we got some kind of fraction. 
            This result is of the Rational class.
            Let's fix this by making it a Float class.
            
            DateTime.now.to_time.utc.to_datetime.ajd.to_f =          
      %h5
        #{DateTime.now.to_time.utc.to_datetime.ajd.to_f}  
      %h3
        %pre
          :preserve
              Hurray! We have a fraction in decimal now and is the day fraction portion 
            which is the current time divided by 24.0 added to 
            "The Astronomical Julian Day Number".
            
              Now let's save it in an instance of the Eot class as the ajd attribute. 
            I used @solar = Eot.new as an Object instance for this site. We used UTC time 
            for the date because it keeps it consistant when UTC could change over to the 
            next day or vice versa if you're in a different time zone. 
            But that is just how you should use the Ruby gem and is what I made sure 
            was done for this site.
            
              Finally set the Eot class attribute with the ajd=( ) method.       
            This is used if we want to calculate all the angles for the current time. 
            It got set once and now we can use it to calculate all the angles. Time could 
            change while calculating them ever so slightly if we used time now for each 
            angle method. Keep in mind that programs take time to run and we don't want 
            to keep updating the time for each function. Let's just stick to the one ajd
            value just calculated.

              I did that on the page that links with a Delta symbol. see the Main page.
       
            @solar.ajd = @current.jd.to_f
      
              We will use the AJD at noon UTC for real time calculations.
            The AJD is made a Float class because for Ruby we would get a rational number
            as you saw done earlier.      
      %h3
        %a{:href => "/time"} Time Julian Century
