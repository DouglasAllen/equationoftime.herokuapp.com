%pre
  :preserve

    The Equation of Time does't really need to use GMST or GAST.
    I did use the method though included called true_longitude_aries( t = time_julian_century( ) ).

    here is that method:

    def true_longitude_aries( t = time_julian_century( ) )
      t.nil? ? t = time_julian_century( ) : t
      eq_of_equinox( t ) + mean_longitude_aries( t )
    end

    eq_of_equinox( t ) had been gone over on the Right Ascension page so refer to that for now.

    mean_longitude_aries( t ) is here:

    def mean_longitude_aries( t = time_julian_century( ) )
      t.nil? ? t = time_julian_century( ) : t
      # Mean equinox point where right ascension is measured from as zero hours.
      # Horners method
      truncate( 280.46061837 +
          t[0] * 36525.0 * 360.98564736629 +
          t[0] * ( t[0] * 0.000387933 -
          t[0] * ( t[0] / 38710000.0 ) ) )
    end

    Notice that it uses the t array also but only the first term. This is called Horner's method.

    What I used could just take that number 360.98564736629 there to get the factor we use for sidereal time ratio.

      But I built a method to extract that using J2000 and the day after at exactly the same time, that is 12:00 pm to see 
    one day's worth of dgrees. If t[0] was zero then it would leave us with only 280.46061837 but what about the next day 
    where the result is a little more complicated to get? Should we assume that 360.98564736629 is the correct number to use? 
    That is why we use a difference of two days centered around the epoch that this formula was derived from. J2000.
    Namely Jan. 01, 01, 12:00 pm UTC and Jan. 01, 02, 12:00 pm. So we use those two dates to get a difference in the 
    angles calculated. That is a real day right?

      One complete rotation of the Earth referenced from the same point which would be the Greenwich or Zero meridian of the 
    Earth. If we can compute the angle then we certainly can get the time also by simply dividing the angle by 15.0 because 
    that is the number of degrees the Earth turns in one Solar hour. So lets just see what I did for that method.

    factor method in Ruby:

    def factor
      jda = Date.parse( "2000-01-01" ).jd
      jdb = Date.parse( "2000-01-02" ).jd
      tjca = time_julian_century( jda )
      tjcb = time_julian_century( jdb )
      tlaa = true_longitude_aries( tjca )
      tlab = true_longitude_aries( tjcb )
      dif = tlab - tlaa
      dr = dif + 360.0
    end

      This could also be run by itself if you just use the EOT module to get the t array and the angles but I won't bother with 
    the details of that. If you know Ruby you should be able to figure it out.

      The result, dr = dif + 360.0 is the difference in the two angles (one is 280.46061837) plus a full 360 degrees of rotation. 
    You would have to run this like stated previously to get to those variables for the angles to see there actual values.
    Maybe I'll show you how at a later post to this web site.

      But for now I will say that the result is 360.9856473662903, not exactly 360.98564736629. Ruby did some kind of magic
    with it. It must have been those tiny little angles added for the next day of jdb = Date.parse( "2000-01-02" ).jd which will 
    make the t array include more than just zeros via tjcb = time_julian_century( jdb ). Did you really want to see the results 
    of that? Like I stated previously, use your Ruby skills or whatever programming language that you may already know for 
    that. Better yet, go to the github repo, clone the gem and run the examples. One is named earth_rotation.rb

    Have fun!

