<html>
  <head>
    <title>right_ascension</title>
  </head>
  <body link=#bbeeff" vlink="#ffffff" alink="#FF0000" style="background-color: #000000; color: #aaddff">
    <a href="/">Home</a>
    <% if @solar %>
    <p>
    <h1>&alpha; (alpha) Right Ascension Sun</h1>
    </p>
    <p><h3>
    Right Ascension is measured along the imaginary celestial equator starting from the</br>
    First Point of Aries which is also known as the Vernal Exuinox. The ecliptic crosses the celestial</br>
    equator two times a year. The Autumnal Equinox is the other crossing pont. These two points</br>
    are also when the declination of the Sun is zero. Two other points along the ecliptic are the</br>
    Solstices.(Summer and Winter) The declination of the Sun is at maximum north during the Summer </br>
    Solstice and at maximum south during the Winter Solstice.</br>
    </p>
    <p>
    Normally Right Ascension is measured in hours, minutes, and seconds from zero. In this case we need</br>
    to take the difference in degrees from the Ecliptic Longitude. This is the Obliquity component (&lambda; - &alpha;)</br>
    for the Equation of Time. The other was the Eliptical orbit component(&Mu; - &nu;). The Right Ascension and Ecliptic </br>
    Longitude form an angle at the cross over points we will refer to as &epsilon; Epsilon in the Ruby methods.</br>
    The other two are &alpha; Alpha and &lambda; Lambda.</br>
    </p>
    <p>
    <h2>These terms are calculated with the Universal Time Coordinate<br />
          or GMT of the current time.</h2>
    </p>
    <p><h3>      
      <input style="font-weight: bold" value="&nbsp;&nbsp;<%= (@solar.time_julian_centurey * 1.0).to_s %>"/> = t  time in fractional centurys since J2000.0
    </p>
    <p>    
		<input style="font-weight: bold" value="&nbsp;&nbsp;<%= @solar.true_longitude.to_s %>"> = lambda, Ecliptic Longitude Sun degrees decimal
    </p>
    <p>
    Ruby method:(Horner's method)</br>
    def mean_obliquity_of_ecliptic(t = time_julian_centurey())</br>
    &nbsp&nbsp;&nbsp&nbsp;bd(23.4392911111 - </br>
    &nbsp&nbsp;&nbsp&nbsp;&nbsp&nbsp;&nbsp&nbsp;&nbsp&nbsp;&nbsp&nbsp;t * (0.0130041666667 + </br>
    &nbsp&nbsp;&nbsp&nbsp;&nbsp&nbsp;&nbsp&nbsp;&nbsp&nbsp;&nbsp&nbsp;t * (1.63888888889e-07 -</br>
    &nbsp&nbsp;&nbsp&nbsp;&nbsp&nbsp;&nbsp&nbsp;&nbsp&nbsp;&nbsp&nbsp;(5.03611111111e-07 * t))))</br>
    end</br>
    </p>
    <p>    
		<input style="font-weight: bold" value="&nbsp;&nbsp;<%= @solar.mean_obliquity_of_ecliptic.to_s %>"> = Mean &epsilon; Epsilon (Earth's tilt) degrees decimal
    </p>
    <p>
    Ruby method:(Horner's method)</br>
    def omega(t = time_julian_centurey())</br>
    &nbsp&nbsp;&nbsp&nbsp;bd(truncate(125.04455501 -</br>
    &nbsp&nbsp;&nbsp&nbsp;&nbsp&nbsp;&nbsp&nbsp;&nbsp&nbsp;&nbsp&nbsp;1800.0 * t) -</br>
    &nbsp&nbsp;&nbsp&nbsp;&nbsp&nbsp;&nbsp&nbsp;&nbsp&nbsp;&nbsp&nbsp;t * (134.136261972 -</br>
    &nbsp&nbsp;&nbsp&nbsp;&nbsp&nbsp;&nbsp&nbsp;&nbsp&nbsp;&nbsp&nbsp;t * (0.00207561111111 +</br>
    &nbsp&nbsp;&nbsp&nbsp;&nbsp&nbsp;&nbsp&nbsp;&nbsp&nbsp;&nbsp&nbsp;t * (2.13944444444e-06 -</br>
    &nbsp&nbsp;&nbsp&nbsp;&nbsp&nbsp;&nbsp&nbsp;&nbsp&nbsp;&nbsp&nbsp;t * 1.64972222222e-08))))</br>
    &nbsp&nbsp;&nbsp&nbsp;
    end</br>
    </p>
    <p>
    Ruby method:</br>
    def obliquity_correction(t = time_julian_centurey())</br>
    &nbsp&nbsp;&nbsp&nbsp;eps0 = mean_obliquity_of_ecliptic(t)</br>
    &nbsp&nbsp;&nbsp&nbsp;omega = omega(t)# a factor of the Moons gravitational pull on the Earth</br>
    &nbsp&nbsp;&nbsp&nbsp;delta_eps = bd(0.00256 * cos(degrees_to_radians(omega)))# The full aberration approximated</br>
    &nbsp&nbsp;&nbsp&nbsp;bd(eps0 + delta_eps)</br>
    end</br>
    </p>
    <p>
    Notice a slight change. Very small though.</br>    
		<input style="font-weight: bold" value="&nbsp;&nbsp;<%= @solar.obliquity_correction.to_s %>"> = &epsilon; Epsilon (Earth's tilt) degrees decimal
    </p>
    <p>
    Ruby method:</br>
    def apparent_longitude(t = time_julian_centurey())</br>
    &nbsp&nbsp;&nbsp&nbsp;tls = sun_true_long(t)</br>
    &nbsp&nbsp;&nbsp&nbsp;omega = omega(t)</br>
    &nbsp&nbsp;&nbsp&nbsp;bd(tls - 0.00569 - 0.00478 * sin(degrees_to_radians(omega)))</br>
    end
    </p>
    <p>
    Ruby method:</br>
    def sun_right_ascension(t = time_julian_centurey())</br>
    &nbsp&nbsp;&nbsp&nbsp;lambda_s = sun_apparent_long(t)</br>
    &nbsp&nbsp;&nbsp&nbsp;epsilon = obliquity_correction(t)</br>
    &nbsp&nbsp;&nbsp&nbsp;y0 = bd(sin(degrees_to_radians(lambda_s)))</br>
    &nbsp&nbsp;&nbsp&nbsp;x0 = bd(cos(degrees_to_radians(lambda_s)))</br>
    &nbsp&nbsp;&nbsp&nbsp;y0 = bd(y0 * cos(degrees_to_radians(epsilon)))</br>
    &nbsp&nbsp;&nbsp&nbsp;bd(radians_to_degrees(atan2(-y0, -x0)) + 180.0)</br>
    end
    </p>
    <p>    
    <input style="font-weight: bold" value="&nbsp;&nbsp;<%= @solar.right_ascension.to_s %>"> = &alpha; Alpha (Right Ascension) degrees decimal
    </p>
    <p>    
    <input style="font-weight: bold" value="&nbsp;&nbsp;<%= (@solar.true_longitude - @solar.right_ascension).to_s %>"> = &Delta; deg. (&lambda; - &alpha;) decimal
    <% s_time = @solar.bd(4.0 * 360.0 / 360.98564736629).round(10) * 1.0%>
    <input style="font-weight: bold" value="&nbsp;&nbsp;<%= s_time.to_s %>"> = minutes per degree sidereal time and multiplying we get</br>
    <input style="font-weight: bold" value="&nbsp;&nbsp;<%= (@solar.delta_t_ecliptic * 60.0).to_s %>"> = &Delta; t (&lambda; - &alpha;) minutes decimal</br>
    <input style="font-weight: bold" value="&nbsp;&nbsp;<%= @solar.display_equation_of_time(@solar.delta_t_ecliptic).to_s %>"> = &Delta;t minutes:seconds in E2
    </p>
    <% end %>
    <a href="/mysuntimes">next</a>    
  </body>
</html>
