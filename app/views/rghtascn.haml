%title equationoftime.herokuapp.com/rightascn.haml
:markdown
  ## &alpha; or alpha = Right Ascension of the Sun

  Right Ascension is measured along the imaginary celestial equator starting from 
  the First Point of Aries which is also known as the Vernal Equinox. The ecliptic 
  crosses the celestial equator two times a year. The Autumnal Equinox is the other 
  crossing point also known as the Ascending Node. These two points are also when the
  declination of the Sun is zero. Two other points along the ecliptic are the
  Solstices ( Summer and Winter ). The declination of the Sun is at maximum north or 
  maximum south during these times.
     
  Normally Right Ascension is measured in hours, minutes, and seconds from zero. 
  In this case we need to take the difference in degrees from Lambda &lambda;. 
  This is the Obliquity component ( &lambda; - &alpha; ) for the Equation of Time. 
  The other was the elliptic Orbital component( &Mu; - &nu; ). 
  The Right Ascension and Ecliptic Longitude form an angle at the cross over points 
  we will refer to as &epsilon; Epsilon in the Ruby methods. The other two methods 
  are &alpha; Alpha and &lambda; Lambda.
    
  These terms are calculated with the Universal Time Coordinate of the current time.
    
  ```ruby

   DateTime.now.to_time.utc.to_datetime
   # => #{DateTime.now.to_time.utc.to_datetime} 
       
  ```
%br
:markdown
  The code for right_ascension is 

  ```c

   double right_ascension(double t)
   {
     double y0 = sine_apparent_longitude(t) * cosine_true_obliquity(t);
     return iauAnp(DPI + atan2(-y0, -cosine_apparent_longitude(t)));
   }
  ```
%br
:markdown
  and

  ```ruby

   def right_ascension    
     Helio.right_ascension(@t) 
   end
  ```
%br
:markdown 
  Initial example
          
  ```ruby

   @solar = Eot.new
   # => #{@solar = Eot.new}

   @solar.right_ascension
   # => #{@solar.right_ascension}
  ```
%br
:markdown
  Specific time example
  
  ```ruby
   @solar = Eot.new
   # => #{@solar = Eot.new}

   @solar.ajd = DateTime.now.to_time.utc.to_datetime.ajd.to_f
   # => #{@solar.ajd = DateTime.now.to_time.utc.to_datetime.ajd.to_f}

   @solar.set_t_ma
   # => #{@solar.ma_ta_set}

   @solar.right_ascension
   # => #{@solar.ra_sun}

   Helio.right_ascension(@solar.t)
   # => #{@solar.ra_sun}      
  ```
%br
:markdown

  
  ```ruby    


  ```
%br
:markdown             

            
  ```ruby


  ```
%br
:markdown  

  ### [Final Equation](/final)
