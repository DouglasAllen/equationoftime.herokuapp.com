%title equationoftime.herokuapp.com/eqc.haml
%hr
%h3
  nu = True Anomaly
          
  nu = Mean Anomaly + Equation of Center
%hr 
:markdown      
  The True Anomaly of the Sun is a correction to the Mean Anomaly via a formula 
  called the 'Equation of Center'. 
  Since: 
  True Anomaly = Mean Anomaly + Equation of Center
      
  I will just show usage of that Ruby method here. 
  The Equation of Center is a sine series of the Mean Anomaly &Mu; or mu
     
  These terms are calculated with the Universal Time Coordinate(UTC)
  current time UTC below.
        
  ```ruby

   DateTime.now.to_time.utc.to_datetime
   # => #{DateTime.now.to_time.utc.to_datetime}

   @solar = Eot.new
   # => #{@solar = Eot.new}

   @solar.t
   # => #{@solar.t}

   @solar.ma
   # => #{@solar.ma}

   @solar.jd_to_datetime(@solar.jd)
   # => #{@solar.jd_to_datetime(@solar.jd)}   
  ```
%br
:markdown   
  Ruby Eot class Equation of Center method:
  This was put into a C extension.
     
        
  ```ruby

   def equation_of_center
              
     sine_1M = sin( 1.0 * @ma )
     sine_2M = sin( 2.0 * @ma )
     sine_3M = sin( 3.0 * @ma )
     sine_4M = sin( 4.0 * @ma )
     sine_5M = sin( 5.0 * @ma )
     e       = earth_orbital_eccentricity
     sine_1M * ( e     *    2.0         - e**3 * 1.0/4.0 + e**5 *  5.0/96.0 ) +  
     sine_2M * ( e * e *    5.0 /  4.0  - 0.0            - e**4 * 11.0/24.0 ) + 
     sine_3M * ( e**3  *   13.0 / 12.0  - 0.0            - e**5 * 43.0/64.0 ) +
     sine_4M *   e**4  *  103.0 / 96.0  - 0.0            - 0.0                +
     sine_5M *   e**5  * 1097.0 / 960.0 - 0.0            - 0.0
                 
   end

  ```
%br
:markdown 
  The above Ruby method was replaced by a C extension which does the same work
  only is much faster. I'm not very good with C but it works. ( t is @t from Ruby code)

  ```c

   double earth_orbital_eccentricity(double t)
   {
     return (0.016708617 + t * (-0.000042037 + t *  -0.0000001235));
   }

   double equation_of_center(double t)
   {             
      double a1, a2, a3, a4, a5, e, ma, s1, s2, s3, s4, s5;
      ma = mean_anomaly(t);
      e   = earth_orbital_eccentricity(t);  
      s1  = sin( 1.0 * ma );
      s2  = sin( 2.0 * ma );
      s3  = sin( 3.0 * ma );
      s4  = sin( 4.0 * ma );
      s5  = sin( 5.0 * ma );
      a1  = s1 * 2;
      a2  = s2 * 5.0/4.0;
      a3  = s3 * 13.0/12.0 - s1 * 1.0/4.0;
      a4  = s4 * 103.0/96.0 - s2 * 11.0/24.0;
      a5  = s5 * 1097.0/960.0 + s1 * 5.0/96.0 - s3 * 43.0/64.0;
      return e * (a1 + e * (a2 + e * (a3 + e * (a4 + e * a5))));
    }
  ```
%br
:markdown
  Use the C extension also
                    
  ```ruby
    
   @solar = Eot.new
   # => #{@solar = Eot.new}           
          
   @solar.equation_of_center
   # => #{@solar.center}

   Helio.equation_of_center(@solar.t)
   # => #{@solar.eqc(@solar.ma, @solar.t)}

   @solar.degrees_equation_of_center
   # => #{@solar.string_eqc}  
  ```
%br
:markdown
  You may give the Helio module methods any time you want as long as they are in julian fractional century
  
  Remember we added Equation of Center to Mean Anomaly? Here we need the difference for &Mu; - &nu;
  I only showed you equation_of_center() method.
  There is a method in Helio module that yields &nu; or True Anomaly 
  that adds Equation of Center to Mean Anomaly. But we could also just change the sign
  of the equation\_of\_center result and get the same thing.
      
  ```ruby

   @solar = Eot.new
   # => #{@solar = Eot.new}

   @solar.equation_of_center * -1.0
   # => #{@solar.equation_of_center * -1.0}

   @solar.mean_anomaly - @solar.true_anomaly
   # => #{@solar.ma - @solar.ta_sun}

   Helio.mean_anomaly - Helio.true_anomaly(@solar.t)
   # => #{@solar.ma - Celes.anp(@solar.ma + @solar.eqc(@solar.ma, @solar.t))}
  ```
%br
:markdown
  That is the first component to the equation of time and is known as the orbital component.
  Eot#delta\_orbit does just that. It takes the opposite sign of equation\_of\_center.
   
  ```ruby

   @solar.delta_orbit
   # => #{@solar.angle_delta_orbit}
  ```
%br
:markdown 
  Sometimes angles are used to determine the time.

  ```ruby

   @solar.delta_orbit / 15.0
   # => #{@solar.angle_delta_orbit / 15.0}
  ```
%br
:markdown
  But we probably don't want to do that for these kinds of angles because they aren't just
  Earth longitudes. That is why I used sidereal minutes per degree to get there times.     
  Check it at the Data link /analemma. It will be close enough for the right day.
%hr
%h3
  next >
:markdown            
  [Ecliptic Longitude](/ecliplon) 