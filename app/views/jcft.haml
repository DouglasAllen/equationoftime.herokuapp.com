%body
  %h1
    Time Julian Century (deprecated)
  %h3
    %pre
      :preserve
           Calculations are made with the Universal Time Coordinate or GMT of the current time.
        
        DateTime.now.to_time.utc.to_datetime = #{@current}     
      
        This method is not used anymore.  
              
        The Ruby Equation_of_Time#time_julian_century( ) method was:                   
          
        def  time_julian_century( dt = DT2000 )
            
        # DT2000 is a default DateTime for the J2000 epoch.
        # The TT ( Terrestrial Time ) = January 1, 2000, 12:00 pm.
            
        # Julian Period Day Number J2000.0 is subtracted from the
        # Julian Number we get from dt.jd or dt.ajd
        # The J2000.0 epoch is precisely Julian date 2451545.0
        # A check for nils and zeros is made which add defaults
        # if there are any. (whiny nil?) 
        # A default array of [0.0, 0.0, 0.0, 0.0, 0.0]
        # would get returned.
        # a check for DateTime is made and is possible to pass in
        # a Julian Number also. If dt is not a Julian Number then
        # we make one out of the dt class.

        # dt  = check_t_zero( dt )      	  
        # dt.class == DateTime ? jd = dt.ajd : jd = dt   
            
        # An array of powers is returned to keep things dry or we
        # would do this for every angle calculation.
        t1 = ( jd - 2451545.0 ) / 36525.0
        # t2  = t1 * t1
        # t3  = t1 * t2
        # t4  = t1 * t3
        # t5  = t1 * t4
        # t6  = t1 * t5
        # t7  = t1 * t6
        # t8  = t1 * t7
        # t9  = t1 * t8
        # t10 = t1 * t9
        # [ t1, t2, t3, t4, t5, t6, t7, t8, t9, t10 ] 
               
        end          
          
           An @ta attribute is being set in the class constructor that is just the 
        same as for t1 return used in the code above.
        @ta and @ma are also set with ma_ta_set method now. See the gem at github.
        No dates or times are needed as parameteres to create a new object.
          
           The datetime now displayed above was the parameter passed to this method.
        We now use just ta = ( jd - 2451545.0 ) / 36525.0 after we convert the
        datetime to an ajd in the initalize method of init.rb 
          
           The returned value:
        #{"Eot.new.ta"} = #{Eot.new.ta}
        is a number representing time as a fractional century.
        
           We'll set the @solar.ajd to the time now.
        #{"@solar = Eot.new"}
        #{@solar = Eot.new}
        #{"@solar.ajd = DateTime.now.to_time.utc.to_datetime.ajd.to_f"}
        #{@solar.ajd = DateTime.now.to_time.utc.to_datetime.ajd.to_f}
        
           Now we'll just plug it into that @ta calculation.
        #{"jcft = ( @solar.ajd - 2451545.0 ) / 36525.0"}
        #{jcft = ( @solar.ajd - 2451545.0 ) / 36525.0}
        
           Why are they different? Remember the default for a new instance of the Eot class
        is for daily UTC noon (the jd of 12:00)
        
          Up next are those four values in the beginning formula (see Tutorial link)
          
          Note I plan on changing @ta to just @t to represent t like in so many
        formuli that you'll probably see if you go look for these astronomical calculations
        online. One good source is the IAU SOFA library. SOFA means Standards of Fundamental
        Astronomy. The celes gem is based on these and is Ruby C extension code which I used
        and learned so much about using C in Ruby with along with of course the Pragmatic book
        Programming Ruby (Pick Ax book is free on line at http://ruby-doc.com/docs/ProgrammingRuby/
          
    %h3
      %a{:href => "/mean"} Mean Anomaly
