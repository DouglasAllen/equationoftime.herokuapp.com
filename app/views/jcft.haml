%title equationoftime.herokuapp.com/jcft.haml
%hr
%h3
  Time Julian Century
%hr
:markdown
  Calculations are made with the Universal Time Coordinate or GMT of the current time.
        
  ```ruby

   DateTime.now.to_time.utc.to_datetime
   # => #{DateTime.now.to_time.utc.to_datetime}
  ```     
%br
:markdown

  ```ruby
  
   @solar = Eot.new
   # => #{@solar = Eot.new}
          
   @solar.t
   # => #{@solar.t}
  ```          
%br
:markdown           
  The @t is being set in the Eot class constructor now and all the methods that use it gain instant
  access once a new instance of Eot is created. The @t attribute is also set with set\_t\_ma method now. 
  See the gem at github.  No dates or times are needed as parameteres to initialize a new Eot object.
          
  It comes from 

  ```ruby

   @t = ( @jd - 2451545.0 ) / 36525.0 
  ```
%br
:markdown       
  after we convert the datetime to a jd number in the initalize method of init.rb 

  Here's that code and so shows the default settings for all these instance variables.

  @date is defaulting to today and here's what you get.
  
  ```ruby

   @solar.date
   # => #{@solar.date}

   def initialize
     dt = Time.now.utc
     @date = Date.parse(dt.year.to_s + "-" + dt.month.to_s + "-" + dt.day.to_s)
     @ajd = @date.ajd
     @jd = @date.jd
     set_t_ma
     @latitude = 0.0  
     @longitude = 0.0       
   end
 
  ```
%br
:markdown       
  The set\_t\_ma method is used if we make changes to the current @jd attribute after it has 
  been initialized.
  
  ```ruby

   def set_t_ma
     @t = ((@jd - DJ00) / DJC).to_f
     @ma = Helio.mean_anomaly(@t)
   end
  ```

%br
:markdown       
  The constants that you see in the code above are...
  
  ```ruby

   DJ00 = 2451545.0 # Julian Day Number for the year 2000 at 12:00 UTC
   DJC  = 36525.0   # number of days in a julian century
  ```

%br       

%hr
%h3
  next >

:markdown           
  [Mean Anomaly](/mean)
