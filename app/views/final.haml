- @solar          = Eot.new
- @universal_time = DateTime.now.to_time.utc
- @current        = @universal_time.to_datetime
- @solar.ajd      = @current.ajd.to_f
- @solar.ma_ta_set
- @t              = @solar.ta
- @r2d            = Eot::R2D
- @s_min          = 4.0 * 360 / 360.98564736629 # 3.989078265
- @gml            = @solar.gml_sun()  * @r2d
- @ra             = @solar.ra_sun() * @r2d
%title equationoftime.herokuapp.com/final.haml
%h3
  :markdown

    Recall our equation for EOT?
      
    &Delta; = ( &Mu; - &nu; ) + ( &lambda; - &alpha; )
      
    &Mu; = Mean Anomaly
      
    &nu; = True Anomaly = Mean Anomaly + Equation of Center
      
    Here I will call Equation of Center c
      
    c = Equation of Center
      
    so that
      
    &Delta;1 = &Mu; - ( &Mu; + c )
          
    or
          
    &Delta;1 = -c
      
    and
      
    &lambda; = Mean Longitude + Equation of Center
      
    I will call Mean Longitude L
      
    &alpha; = Right Ascension
      
    &Delta;2 = ( L + c ) - &alpha;
      
    Total = -c + L + c - &alpha;
      
    Two terms cancel out, &Mu; and c
      
    Total = L - &alpha;      
    
    Mean Longitude Sun decimal degrees = #{@gml}
    
    &alpha; or Right Ascension decimal degrees = #{@ra}
 
    &Delta; ( L - &alpha; ) decimal degrees = #{@gml - @ra}

    &Delta; decimal minutes =  #{(@gml - @ra) * @s_min}
 
    &Delta; minutes and seconds =  #{@solar.show_minutes((@gml - @ra) * @s_min)}     
 
    This works most of the time except right after the Vernal Equinox, 
    Mean Longitude is still approaching 360 degrees while Right Ascension has 
    zeroed so I didn't do this. I'm just showing what might seem simple and I think
    that I've seen this in the simple equation of time algorithms. But you still
    need terms like c to calculate true longitude and &Mu; to get that so why not 
    make the rest while you're at it. It's pretty simple too.

%hr
%h3  
  %a{:href => "/eot"} all values now
