- @title = 'equationoftime.herokuapp.com/tutorial.haml'
:markdown
  
  ## Tutorial
    
  ## &Delta; = ( &Mu; - &nu; ) + ( &lambda; - &alpha; )
    
  The above reads:
  delta = mu - nu + lambda - alpha    
  true noon (solar transit of local meridian) and mean noon (longitude crossing) difference.
  
  mu = Mean Solar Anomaly
  
  nu = True Solar Anomaly  
  
  lambda = Apparent Solar Longitude
  
  alpha = Apparent Solar Right Ascension 
  
  
  &nbsp;&nbsp;&nbsp; I'm not going to try to explain what the equation of time is. For that
  you may read something like this [The Equation of Time](http://aa.usno.navy.mil/faq/docs/eqtime.php#eqoftime) 

  I will give you a whirlwind tour of how this gem works however.

  So we may just solve for these four components using our Ruby code.
    

  ```ruby
  
   @solar = Eot.new
   # => #{@solar = Eot.new}

   mu = Helio.mean_anomaly(@solar.t)
   # => #{mu = @solar.ma}

   nu = Helio.true_anomaly(@solar.t)
   # => #{nu = @solar.ta_sun}

   lambda = Helio.apparent_longitude(@solar.t)
   # => #{lambda = @solar.al_sun}

   alpha = Helio.right_ascension(@solar.t)
   # => #{alpha = @solar.ra_sun}

   mu - nu + lambda - alpha
   # => #{mu - nu + lambda - alpha}
  ```
%br
:markdown  
  &nbsp;&nbsp;&nbsp;Right! So what does all that mean? What do I do with it now?
  I'm glad you asked. Kind of like the Jean Meeus 
  book[http://www.willbell.com/math/mc1.htm] 'Astronomical Algorithms', I'm not going
  to teach astronomy or computer programming. This site is just about the Ruby gem
  'equationoftime' and how to use it. Oh! And did I mention, not even math or Ruby?
  Thanks for your interest in it by the way if I didn't already tell you that some place. 
  K nuff chit chat. let's get started.
 

  &nbsp;&nbsp;&nbsp; You may either continue reading here and the next links or just click
  on the examples link to see what it's good for.

  ## So why do we need to calculate the equation of time?

  &nbsp;&nbsp;&nbsp; Do you want to know how to find when your sunrise and sunset occur?
  Well then this is why we need to know it. Like most of those calculators online, 
  you will need to also know what your longitude and latitude are for your specific 
  location here on Earth.
  Just search for that or use one of those calculators that has a city lookup feature. 
  Make a note then of what they are. Or even use your GPS feature on your mobile device.

  &nbsp;&nbsp;&nbsp; Next, plug your longitude number into this formula below.
     
  ```ruby
    
   # Enter your longitude as a decimal number. No minutes or seconds please.
   # If you don't know that then take these steps first.
   # Divide the seconds by 60.0 then add that to the minutes.
   # Divide those minutes by 60.0 then add those to the degrees. Be sure to keep the
   # sign with it + or -
   # It will be minus if your longitude is west. Do nothing if it is East.
   # Got it as a decimal now?

   longitude = gets.strip.to_f
   # IRB will let you enter it now.
     
   @solar = Eot.new
   # => #{@solar = Eot.new}

   # I'll have to use something because I won't enter it here.

   @solar.longitude = longitude
   # => #{@solar.longitude = -76.54321}

   @solar.mean_local_noon_jd
   # => #{@solar.mean_local_noon_jd}

   # let's try it again with a different longitude to make sure that it is effective.

   @solar.longitude = 123.4567
   # => #{@solar.longitude = 123.4567}

   @solar.mean_local_noon_jd
   # => #{@solar.mean_local_noon_jd}     
  ```
%br  
:markdown 
  &nbsp;&nbsp;&nbsp; What is that? Carry on then. Ah the suspense!   
 
  ### [Julian Numbers and DateTime](/datetime) 
