%title equationoftime.herokuapp.com/datetime.haml
%hr
%h3
  What are Julian Numbers?
%hr
:markdown
  &nbsp;&nbsp;&nbsp; Astronomers sometimes use Julian Period Day Numbers for logging of their 
  astronomical observations. But first a little history if you like. https://en.wikipedia.org/wiki/Joseph_Justus_Scaliger
  Who's that? Well we have to give him credit for coming up with these numbers. 

  https://en.wikipedia.org/wiki/Julian_day
  If that isn't enough math and terminology to make your head spin then you're going to be bored
  reading the rest of this tutorial.

  I'll just sort of make a picture for you with Ruby code.
   
  ```ruby

   DateTime.jd(0,12)
   # => #{DateTime.jd(0,12)}

  ```              
%br
:markdown  
  &nbsp;&nbsp;&nbsp; Yep! That's where they begin for day zero. Where are we today?

  ```ruby

   DateTime.jd(Date.today.jd,12)
   # => #{DateTime.jd(Date.today.jd,12)}
  ```
%br
:markdown
  &nbsp;&nbsp;&nbsp;Notice what we get without the 12? 

  ```ruby

    DateTime.jd(Date.today.jd)
    # => #{DateTime.jd(Date.today.jd)}
  ```              
%br
:markdown
  &nbsp;&nbsp;&nbsp; The time reference we need starts at midnight UTC
  for the day but "Julian Day Numbers" begin at noon or 12:00 considering a 24
  hour day. 

  ```ruby

   DateTime.jd
   # => #{DateTime.jd}
  ```
%br
:markdown            
  &nbsp;&nbsp;&nbsp; Wait! Didn't I just do that? No. We don't have noon now. Let's try again.

  ```ruby

   DateTime.now.jd
   # => #{DateTime.now.jd}
  ```
%br
:markdown           
  &nbsp;&nbsp;&nbsp; #now method did it though. Julian Day numbers usually don't have decimals included unless of course we use Floats.
  We can include decimals but technically those are termed as Astronomical Julian Day numbers.


  Hey! Watch what we can do with Eot class.

  ```ruby

   @solar = Eot.new
   # => #{@solar = Eot.new}

   @solar.jd
   # => #{@solar.jd}

   @solar.jd.to_f
   # => #{@solar.jd.to_f}
  ```
%br
:markdown        
  There is only a half day difference for what is termed 
  "The Astronomical Julian Day Number" and it is the Julian Day Number with 1/2
  or 0.5 day(12 hours fractional day) subtracted. 
           
  ```ruby

   # ajd = jd - 0.5

   Date.today.jd.to_f
   # => #{Date.today.jd.to_f}

   Date.today.jd.to_f - 0.5
   # => #{Date.today.jd.to_f - 0.5}

   Date.today.ajd.to_f
   # => #{Date.today.ajd.to_f}
  ```              
%br
:markdown            
  &nbsp;&nbsp;&nbsp; Midnight is where we normally start counting 'Hours' for any day and it 
  just happens to be 12 hours from the International Date Line where we 
  start counting 'Days' globally. 'Time' is referenced from the Prime Meridian established at
  Greenwich, England in the late 1800s. So adding on the current time to this ajd as a fraction 
  of the day will give us the correct Julian Period Day Number for any 'Time' period of interest.
  Then all the angle calculations will be correct for the time you want them but we sort of default
  to noon because we're interested in rise and set times with this gem. But you may do many other 
  things too.

  We can also go back to the time with a Ruby method.

  ```ruby

   DateTime.jd(DateTime.now.jd)
   # => #{DateTime.jd(DateTime.now.jd)}
  ```
%br
:markdown  
  But that's not noon so what's up with that?

  ```ruby

   DateTime.jd(DateTime.now.jd,12))
   # => #{DateTime.jd(DateTime.now.jd,12)}
  ```
%br
:markdown
  There, that should fix it. Put the 12 back in like it was in the beginning.

  But back to day fractions now.

  ```ruby

   DateTime.now.day_fraction
   # => #{DateTime.now.day_fraction}
  ```
%br
:markdown                    
  That's why you saw the to_f in all those methods above. We'll get into that soon.

  &nbsp;&nbsp;&nbsp; The calculated terms used for this Ruby back-end site are done with 
  "Universal Time Coordinate" (UTC) of the current server time.
  
  &nbsp;&nbsp;&nbsp; In Ruby we can use the Date class and many of the methods or functions
  from this class. One method used here is Date.jd( ) which gives us a 
  Julian Day Number. We can set the jd attribute for Eot class
  using an instance method of the class defined as say eot or @solar as I have used for this site.
  Hence @solar.jd=( ) is the method we can use to set the 'JD' inside the Eot class. You may want to do
  this in special cases but we'll get into that later.

  ```ruby

    @test = Eot.new
    # => #{@test = Eot.new}

    @test.jd = 0.0
    # => #{@test.jd = 0.0}

    @test.jd 
    # => #{@test.jd}
  ```
%br
:markdown 
  This is just a convenience method for setting the @jd attribute and allows
  us to keep it handy for all the calculations that this gem will use to
  find the equation of time and rise and set sun times. 
  Use the Date.jd() or DateTime.jd() to find it first. You should probably set it as a Float
  just to be sure we can work with adding and subtracting Float classes. Time,  Date, and DateTime allow
  this but it can be more complex because they seem to use the smallest parts first such as seconds.
  Stick to the JD and AJD numbers and we may keep things simple. Time class is the only one that does not
  include any methods for those though. But we may convert back and forth.

  ```ruby

    Date.today.jd.to_f
    # => #{Date.today.jd.to_f} 

    DateTime.now.jd.to_f
    # => #{DateTime.now.jd.to_f}  
  ```
%br
:markdown 


  (Note:) You will not need to do this if you let Eot default to today which happens on any 'new' instance ie.
  It will also be at Noon which is convenient for sunrise and sunset calculations.
  Eot.new

  ```ruby

   Eot.new.jd.to_f
   # => #{Eot.new.jd.to_f}
  ```
%br
:markdown         
  &nbsp;&nbsp;&nbsp; DateTime is a class included in the Ruby Standard Library Date class. 
  It can be used like the Time class to find the current time  
  ( time = Time.now ) but you will have to require 'date' lib first.   
   
  ```ruby
   
   require 'date'
         
   DateTime.now
   # => #{DateTime.now}                
  ```
%br
:markdown          
  Note: If you do this on your system it will be in local time.

  &nbsp;&nbsp;&nbsp; To ensure that we get time in UTC there are further methods available.            
  Let's convert it to a Time class with the to_time() method as shown.
            
  ```ruby
   
   DateTime.now.class 
   # => #{DateTime.now.class}
   
   DateTime.now.to_time
   # => #{DateTime.now.to_time}
   
   DateTime.now.to_time.class
   # => #{DateTime.now.to_time.class}
  ```
%br
:markdown       
  Note: It is still in local time or the time on the server but doesn't it look nicer now with whitespace?
         
  &nbsp;&nbsp;&nbsp; Let's make sure we have a time in UTC with utc() method.
            
  ```ruby
   
   DateTime.now.to_time.utc
   # => #{DateTime.now.to_time.utc}
  ```
%br
:markdown                            
  Do you see any difference? If the server is set at UTC it will have +0000
  on the end for local time. Universal time will show UTC on the end for it.
            
  ```ruby
   
   time = DateTime.now.to_time.utc
   # => #{DateTime.now.to_time.utc}
  ```
%br
:markdown      
  &nbsp;&nbsp;&nbsp; This is a Time class showing the real server time.
  Let's just see if we can get a valid Astronomical Julian Day Number with 
  the time as a day fraction to add on to the ajd.
  We'll get the fraction first by dividing the time by 24.0.
  But wait! Ruby will do that for us so let's just chain in some more methods. 
            
  &nbsp;&nbsp;&nbsp; We'll use the ajd() method from the DateTime class.
  But first we have to convert it back to a DateTime or Date class.
            
  ```ruby
   
   DateTime.now.to_time.utc.to_datetime.class
   # => #{DateTime.now.to_time.utc.to_datetime.class}

   DateTime.now.to_time.utc.to_date.class
   # => #{DateTime.now.to_time.utc.to_date.class}             
           
   DateTime.now.to_time.utc.to_datetime.ajd
   # => #{DateTime.now.to_time.utc.to_datetime.ajd} 

   DateTime.now.to_time.utc.to_date.ajd
   # => #{DateTime.now.to_time.utc.to_date.ajd}
  ```
%br
:markdown            
  &nbsp;&nbsp;&nbsp; But wait! Why are these two results different? Well it is simply that the Date class
  is only for the date and excludes the fractional day. We need DateTime class if we wish to include the fractional day.         
      
  &nbsp;&nbsp;&nbsp; It looks like we got some fractions though. These results are in the Rational class.
              
  ```ruby
   
   DateTime.now.to_time.utc.to_datetime.ajd.class
   # => #{DateTime.now.to_time.utc.to_datetime.ajd.class} 
  ```
%br
:markdown               
  &nbsp;&nbsp;&nbsp; Yep! That's what Ruby does with it.
  Let's fix this by making it a Float class.
            
  ```ruby
   
   DateTime.now.to_time.utc.to_datetime.ajd.to_f.class
   # => #{DateTime.now.to_time.utc.to_datetime.ajd.to_f.class}          
  ```
%br
:markdown       
  (Note:) That was just to prove it. We want the value in a Float and then
  we'll quit chaining on so many methods.
            
  ```ruby
 
   DateTime.now.to_time.utc.to_datetime.ajd.to_f
   # => #{DateTime.now.to_time.utc.to_datetime.ajd.to_f}
  ```
%br
:markdown              
  &nbsp;&nbsp;&nbsp;  Hurray! We have a fraction in decimal now and is the day fraction portion 
  which is the current time divided by 24.0 added to "The Astronomical Julian Day Number".
  Remember that? 
  
  DateTime class also gives us a method to find the day fraction ie. DateTime.day_fraction, We did
  that earlier but forgot to get our float and so was a rational number. (see above)
  
  ```ruby
  
   Date.today.ajd.to_f
   # => #{Date.today.ajd.to_f}

   DateTime.now.day_fraction.to_f
   # => #{DateTime.now.to_time.utc.to_datetime.day_fraction.to_f}

   Date.today.ajd.to_f + DateTime.now.to_time.utc.to_datetime.day_fraction.to_f
   # => #{Date.today.ajd.to_f} + #{DateTime.now.to_time.utc.to_datetime.day_fraction.to_f}
   # => #{Date.today.ajd.to_f + DateTime.now.to_time.utc.to_datetime.day_fraction.to_f}
  ```
%br
:markdown       
  But those day fractions don't match. Well the faster the machine the closer they will be but it takes time to find them.    
            
  &nbsp;&nbsp;&nbsp;  Now let's save it in an instance of the Eot class as the @jd attribute. 
  I used @solar = Eot.new as an Object instance for this site. We used UTC time 
  for the date because it keeps it consistant when UTC could change over to the 
  next day or vice versa if you're in a different time zone. 
  But that is just how you should use this Ruby gem and is what I made sure 
  was done for this site.
            
  &nbsp;&nbsp;&nbsp; Finally set the Eot class attribute with the jd=( ) method.
        
  ```ruby     
   @solar = Eot.new
   # => #{@solar = Eot.new} # this is an Object id number 
  ```
%br
:markdown         
  Refresh the page and it should change along with all the times if you needed an update.

  Note : for the gem use #jd= but to find the time now use #ajd in Ruby.

  ```ruby
  
   @solar.jd = DateTime.now.to_time.utc.to_datetime.ajd.to_f
   # => #{@solar.jd = DateTime.now.to_time.utc.to_datetime.ajd.to_f}
        
   @solar.jd
   # => #{@solar.jd}
  ```
%br
:markdown  
  All the calculations depend on @t being set and the @jd is where it comes from. The constants are shown in later parts of
  this tutorial.

  I'm also just showing the method that does this in the init.rb file.

  ```ruby
  
   @solar.t
   # => #{@solar.t}
        
   def set_t_ma
     @t = ((@jd - DJ00) / DJC).to_f
     @ma = Celes.falp03(@t)
   end
   alias_method :ma_ta_set, :set_t_ma 
  ``` 
%br
:markdown 
  So it's all adjusted in the gem when you give your longitude to get your mean and true solar transit.
            
  ```ruby
  
   @solar.jd = DateTime.now.to_time.utc.to_datetime.ajd.to_f
   # => #{@solar.jd = DateTime.now.to_time.utc.to_datetime.ajd.to_f}
        
   Eot.new.jd
   # => #{Eot.new.jd}
  ```

%br
:markdown          
  &nbsp;&nbsp;&nbsp; Note that no time is added here because a default is set for noon so that
  we may get suntimes for today right away. Remember we only need Eot for this purpose.
  But there is a method we may use to get it for the current time for the actual equation of time now.
        
  ```ruby
  
   @solar.now
   # => #{@solar.now}

   @solar.now.to_f / 60.0 / 24.0
   # => #{@solar.now.to_f / 60.0 / 24.0}
  ```
%br
:markdown         
  &nbsp;&nbsp;&nbsp; This is Eot in decimal minutes and a way to make it part of any JD for instance your Mean Solar Transit
  as a JD plus eot_jd will equal your True Solar Transit as a JD.

  ```ruby
  
   @solar.eot_jd
   # => #{@solar.eot_jd}
  ```
%br
:markdown         

  There is a method to show Eot in time format too.
  
  ```ruby
  
   @solar.show_minutes(@solar.now)
   # => #{@solar.show_minutes(@solar.now)}
  ```
%br
:markdown         
  &nbsp;&nbsp;&nbsp; For now just keep in mind what our goals are for using this gem. We either want to 
  set the DateTime for exactly now or the Local Mean Solar Transit. 

%hr
%h3
  next >
:markdown 
  [Julian Century Fractional Time](/jcft)
