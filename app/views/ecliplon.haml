%title equationoftime.herokuapp.com/epilong.haml
:markdown

  ## &lambda; or lambda = Ecliptic Longitude of the Sun

  The ecliptic is the path that we see the Sun, Moon and planets take.
  From our east horizon to our west horizon we observe them.
  It is offset like a sine wave from the Celestial Equator.
  The obliquity(tilt) of the Earth determines this amount known as Declination.
  The ecliptic is either on, above, or below this imaginary Celestial Equator.
  Some of these points you may be familiar with like Solstice and Equinox.
  We need a reasonable starting point again like we did with the anomalies.
  Here we use a term similar to the first ( Mean ) Anomaly called the Mean
  Longitude. The formula is below.
    
  These terms are calculated with the Universal Time Coordinate or GMT 
  of the current time.
    
  ```ruby

   DateTime.now.to_time.utc.to_datetime
   # => #{DateTime.now.to_time.utc.to_datetime}         
  ```
%br
:markdown

  ```c

   /* Mean geocentric longitude of the Sun */
   double mean_longitude(double t)
   {
     return fmod(      280.4664567    +
        t * (        36000.76982779   +
        t * (            0.0003032028 +
        t * (   1.0/499310.0          +
        t * (  1.0/-152990.0          +
        t * (1.0/-19880000.0 ) ) ) ) ), 360.0 ) * 0.017453292519943295769236907684886;
   }
  ```
%br
:markdown
  As with the Mean Anomaly we need to correct for elliptical Keplerian orbit.
  We use Equation of Center as before with Mean Longitude.
  True Longitude will be returned.

          
  ```c

   double true_longitude(double t)
   {
     return fmod( mean_longitude(t) + equation_of_center(t), 57.295779513082320876798154814105);
   }
  ```
%br
:markdown
  There is one more method that takes True Ecliptic Longitude of the Sun and converts it to Apparent Longitude.    

  ```c

   double apparent_longitude(double t)
   {
     return iauAnp(fmod(true_longitude(t) - 
           0.00569 * 0.017453292519943295769236907684886 - 
           0.00478 * 0.017453292519943295769236907684886 * 
           sin(iauFaom03(t)), 57.295779513082320876798154814105));
   }
  ```
%br
:markdown
  Use any of these from Helio module or Eot class. Repeating myself there a bit. We'll hook up
  the SOFA lib constants soon. I derived those from the desktop calculator and they're nice and long
  for more accuracy. You should be able to tell what they are but if not the little one is radians in a degree
  and the big one is degrees in a radian. Two Pi of those in a circle.

  ### [Right Ascension](/rghtascn)
