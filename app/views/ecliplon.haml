- @solar = Eot.new
- @universal_time = DateTime.now.to_time.utc
- @current        = @universal_time.to_datetime
- @solar.ajd = @current.ajd.to_f
- @solar.ma_ta_set
- @t = @solar.ta
- @r2d = Eot::R2D
- @gml = @solar.gml_sun() * @r2d
- @eqc = @solar.center()  * @r2d
- @tl = @solar.tl_sun()   * @r2d
- @tl_string      = @solar.string_tl_sun() 
%title equationoftime.herokuapp.com/epilong.haml
:markdown

  ## &lambda; or lambda = Ecliptic Longitude of the Sun

  The ecliptic is the path that we see the Sun, Moon and planets take.
  From our east horizon to our west horizon we observe them.
  It is offset like a sine wave from the Celestial Equator.
  The obliquity(tilt) of the Earth determines this amount known as Declination.
  The ecliptic is either on, above, or below this imaginary Celestial Equator.
  Some of these points you may be familiar with like Solstice and Equinox.
  We need a reasonable starting point again like we did with the anomalies.
  Here we use a term similar to the first ( Mean ) Anomaly called the Mean
  Longitude. The formula is below.
    
  These terms are calculated with the Universal Time Coordinate or GMT 
  of the current time.
    
  ```ruby

   DateTime.now.to_time.utc.to_datetime = #{@current} 
   The @ta value = #{@t}        
  ```
%br
:markdown
  Ruby Eot#gml_Sun( ) method:
  This was put into a C extension.
          
  ```ruby

   def gml_Sun( ta = A2000 )
     ta = check_jct_zero( ta )
      
     #ta[ 4 ] *    -5.030e-7   +
     #ta[ 3 ] *    -6.536e-5   +
     #ta[ 2 ] *     2.003e-5   +
     #ta[ 1 ] *   303.203e-6   +
     #ta[ 0 ] * 36000.76982779 +
     #            280.4664567  +
     total = [ 1.0/-19880000.0,  1.0/-152990.0, 1.0/499310.0,
               0.0003032028, 36000.76982779,  280.4664567 
             ].inject(0.0) {|p, a| p * ta[ 0 ] + a}               
     mod_360( total )
   end

   Mean Longitude Sun decimal degrees = #{@gml}
  ```
%br
:markdown  

  ```c
   double mlSun(double t)
   {
     double a;
     double d2r = 0.017453292519943295769236907684886;
      
     /* Mean geocentric longitude of the Sun */
     return fmod(             280.4664567    +
            t * (           36000.76982779   +
            t * (               0.0003032028 +
            t * (    1.0 / 499310.0          +
            t * (   1.0 / -152990.0          +
            t * ( 1.0 / -19880000.0 ) ) ) ) ), 360.0 ) * d2r;
   }
            
  ```
%br
:markdown
  As with the Mean Anomaly we need to correct for elliptical Keplerian orbit.
  We use Equation of Center as before with Mean Anomaly.
  True Longitude will be returned.

  Ruby Eot#tl_Sun( ) method:
  This was put into a C extension.
          
  ```ruby

   def tl_Sun( ta = A2000 )
     ta = check_jct_zero( ta )
     mod_360(
              gml_Sun( ta ) + 
               center( ta )
            )            
   end
          
   Equation of Center in decimal degrees = #{@eqc} 

   After adding them together we get
      
   True Ecliptic Longitude of the Sun in decimal degrees = #{@tl} 
      
   degrees:minutes:seconds = #{@tl_string}
  ```
%br
:markdown
  There is one more method that takes True Ecliptic Longitude of the Sun
  and converts it to Apparent Longitude but for now I won't bore you with 
  those details and it was put inta a C extension also.    

%hr
%h3
  %a{:href => "/rghtascn"} Right Ascension
