%title equationoftime.herokuapp.com/mean.haml
%hr
%h3
  &Mu; or mu = Mean Anomaly of the Sun
%hr
:markdown    
  &nbsp;&nbsp;&nbsp; The Mean Anomaly of the Sun is a fictitious value based on an 
  assumption that the Earth's orbit is circular rather than eliptical and that the 
  Earth's velocity is also constant. (see https://en.wikipedia.org/wiki/Mean_anomaly)

  Mean Anomaly is used as a starting point to calculate the Eccentric and True Anomalies. 
  The mean anomaly is used to calculate the Equation of Center which will be used to calculate True Anomaly and True Longitude.
  True Longitude is then used to calculate Right Ascension. On the Main page you see 
  mu and nu. But as you will see in the next page that the Equation of Center 
  is added to mu to get nu. We use Equation of Center again to calculate 
  True Longitude. Lambda is the Apparent Longitude which comes from True Longitude
  after we adjust for aberation.
    
  See:  
    
  ```sh
    
   http://analemma.com/Pages/EllipticalOrbit/EllipticalOrbitEffect/EllipticalOrbitEffect.html
     
   http://analemma.com/Pages/EllipticalOrbit/EllipticalOrbitEffect/E_vs_C_movie.html
  ```   
%br
:markdown        
  These terms are calculated with the Universal Time Coordinate or GMT 
  of the current time.
    
  ```ruby
    
   DateTime.now.to_time.utc.to_datetime
   # => #{DateTime.now.to_time.utc.to_datetime}

   @solar = Eot.new
   # => #{@solar = Eot.new}
    
   @solar.jd
   # => #{@solar.jd}

   @solar.t 
   # => #{@solar.ta}

   @solar.ma 
   # => #{@solar.ma}
  ```
%br
:markdown    
  &nbsp;&nbsp;&nbsp; You saw earlier that we found Mean Anomaly from the Helio module
  and that it gets @t set for noon today. But what if we want to change the time in other
  words the t parameter passed to it and all the other angle calculations you saw on the
  first page of the tutorial? 

  Note: The JD is for Noon today and we will set it for a different time next.

  &nbsp;&nbsp;&nbsp; Here's what we do.   
    
  ```ruby

   @solar = Eot.new
   # => #{@solar = Eot.new}

   # we need to know a new date or time say six hours from now.
   DateTime.now.to_time.utc.to_datetime.ajd.to_f + 6 / 24.0
   # => #{DateTime.now.to_time.utc.to_datetime.ajd.to_f + 6 / 24.0}

   # we'll just plug that in to our setter method for ajd.
   @solar.jd = DateTime.now.to_time.utc.to_datetime.ajd.to_f + 6 / 24.0
   # => #{@solar.jd = DateTime.now.to_time.utc.to_datetime.ajd.to_f + 6 / 24.0}

   # check it
   @solar.jd
   # => #{@solar.jd}

   # we got that set okay. Now set @t and @ma
   @solar.set_t_ma
   # => #{@solar.ma_ta_set}

   # check it
   @solar.ma
   # => #{@solar.ma}

   # not the same as the first one up there on this page is it? Good!      

  ```
%br
:markdown    
  &nbsp;&nbsp;&nbsp; Now that's good for all the other angle equations that depend on it.
  Why keep recalculating it and having to pass time in there as well? Why do I have that
  set\_t\_ma method? Because I'm a control freak and I like buttons. :-D Because I'm a Java
  reject. ;-( I just found that it was easier than messing up the attribute setter and getter.
%hr
%h3
  next >
:markdown
  [*Equation of Center*](/eqc)
